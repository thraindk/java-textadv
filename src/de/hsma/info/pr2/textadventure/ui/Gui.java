package de.hsma.info.pr2.textadventure.ui;

// Wurde nach der TextUi geschrieben, dockt auch an Game an.
// Folgenden Editor habe ich fürs Layout benutzt:
//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.

// TODO Text autoscrollable machen

import java.awt.*;
import java.awt.event.*;
import java.util.Date;

import javax.swing.*;
import de.hsma.info.pr2.textadventure.facade.Game;

@SuppressWarnings("serial")
public class Gui extends JPanel implements ActionListener, KeyListener {

	class Timer implements Runnable { // Fürs Messen der Runde

		long startZeit;
		long spielZeit;
		long playTime;
		JFrame fenster;

		public Timer(JFrame fenster, long playTime) { // Übergebe GUI Fenster
			this.fenster = fenster;
			this.playTime = playTime;


		}


		public long getSpielZeit() {
			return spielZeit;
		}

		@Override
		public void run() {

			startZeit = new Date().getTime() - playTime; // Referenzzeitpunkt - schon vergangene Zeit aus Spielstand

			while(!Thread.currentThread().isInterrupted()) { // zum Beenden
				updateTime(startZeit);
				try {
					Thread.currentThread().sleep(1000);
				} catch (InterruptedException e) { // Interrupt Signal konnte nicht gesetzt werden, nachholen
					Thread.currentThread().interrupt(); // Aufwachen lassen, mache weiter
				}
			}
		}

		private void updateTime(long zeit) { // aktualisiere Spielzeit im Fenster-Titel
			spielZeit = new Date().getTime()-zeit; // Jetztige Zeit - startZeit
			game.setPlayerPlayTime(spielZeit);
			fenster.setTitle(game.getStoryName()+" ("+game.getPlayerName()+") Spielzeit: "+Long.toString((spielZeit/1000))+"s"+" - Textadventure Engine 1.0");
		}


	}

	private JButton enterInput;
	private JTextArea stageScene;
	private JTextField inputField;
	private JList<String> itemList;
	private JButton showItemDescr;
	private JButton saveButton;
	private Game game;
	private String[] itemListItems;
	private Thread threadedTimer;

	public Gui(Game game) { // Konstruktor

		this.game = game;
		//construct preComponents
		itemListItems = new String[0];

		//construct components
		enterInput = new JButton ("Eingabe");
		enterInput.addActionListener(this);
		stageScene = new JTextArea (5, 20);
		inputField = new JTextField (5);
		itemList = new JList<String> (itemListItems);
		showItemDescr = new JButton ("anschauen");
		showItemDescr.addActionListener(this);
		saveButton = new JButton ("speichern");
		saveButton.addActionListener(this);

		//adjust size and set layout
		setPreferredSize (new Dimension (634, 310));
		setLayout (null);
		stageScene.setEditable(false);

		// Für fettgedruckt


		//add components
		add (enterInput);
		add (inputField);
		add (itemList);
		add (showItemDescr);
		add (saveButton);

		//set component bounds (only needed by Absolute Positioning)
		enterInput.setBounds (430, 270, 85, 30);
		stageScene.setLineWrap(true); // Wenn ausgabe nicht auf Bildschirm passt, automatisch scrollbar machen
		stageScene.setWrapStyleWord(true);
		JScrollPane sp = new JScrollPane(stageScene);
		sp.setBounds (10, 10, 505, 245);
		add(sp);
		inputField.setBounds (10, 270, 415, 30);
		itemList.setBounds (525, 45, 100, 175);
		showItemDescr.setBounds (525, 230, 100, 25);
		saveButton.setBounds (525, 10, 100, 25);
		showItemDescr.setEnabled(false);

		JFrame frame = new JFrame (game.getStoryName()+" ("+game.getPlayerName()+") "+" - Textadventure Engine 1.0");
		threadedTimer = new Thread(new Timer(frame, game.getPlayerPlayTime()));
		frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().add (this);    
		frame.pack();
		frame.setVisible (true);
		frame.setResizable(false);
		frame.getRootPane().setDefaultButton(enterInput);

		// Erster Start
		stageScene.append("# Kapitel: "+(game.getCurrentStage()+1)+"\n");
		stageScene.append(game.getStageScene());
		stageScene.append(System.lineSeparator());
		stageScene.append(System.lineSeparator());

		checkForItems(); // Prüfe, ob Inventarbutton aktiviert werden muss
		threadedTimer.start();
	}

	@Override
	public void actionPerformed(ActionEvent e) {

		if (e.getSource().equals(enterInput)) { // Eingabe-Button gedrückt	

			//System.out.println(e.getActionCommand()); // Welcher Button wurde geklickt

			processEingabe();
			checkForItems();

			// Items im Inventar

			// Spielende?

			if(game.hasEnded())
				freezeGui();


		}else if(e.getSource().equals(showItemDescr)) { // Inventar-Item anzeigen gedrückt

			int listIndex = itemList.getSelectedIndex();

			if(listIndex != -1 && game.playerHasItem(itemListItems[listIndex].toLowerCase())) { // Überhaupt was ausgewählt?
				stageScene.append(game.getItemDescr(itemListItems[listIndex].toLowerCase())); // Hole item-Beschreibung
				stageScene.append(System.lineSeparator());
				stageScene.append(System.lineSeparator());
			} 
		}else if (e.getSource().equals(saveButton)) { // Speichern

			if(game.saveGame()) {
				stageScene.append("> Spielstand für '"+game.getPlayerName()+"' gespeichert!");
			}else {
				stageScene.append("FEHLER: Spielstand konnte nicht gespeichert werden.");
			}
			stageScene.append(System.lineSeparator());
			stageScene.append(System.lineSeparator());

		}

	}

	@Override
	public void keyPressed(KeyEvent e) {	// Anstatt Eingabe Button solls auch mit Enter gehen
		if (e.getKeyCode()==KeyEvent.VK_ENTER){
			processEingabe();
			checkForItems();
			// Spielende?

			if(game.hasEnded())
				freezeGui();
		}

	}

	private void freezeGui() {	// Zeit stoppen und Eingabe sperren
		enterInput.setEnabled(false);
		showItemDescr.setEnabled(false);
		saveButton.setEnabled(false);
		threadedTimer.interrupt();
	}

	private void checkForItems() {
		itemListItems = new String[game.getPlayerInventory().size()]; // Gleiche Liste mit Inventar ab
		itemListItems = (game.getPlayerInventory()).toArray(itemListItems);
		//System.out.println(itemListItems.length);
		itemList.setListData(itemListItems);

		if(itemListItems.length > 0) { // Button (de)aktivieren, wenn was in Liste ist
			showItemDescr.setEnabled(true); 
		}else {
			showItemDescr.setEnabled(false);
		}

	}

	private void processEingabe() { // String an game weiterreichen

		String input = inputField.getText();
		if (!input.equalsIgnoreCase("")) { // Falls was eingegeben wurde

			stageScene.append("("+input+") " + game.processAction(input.toLowerCase())); // Verarbeite Eingabe

			stageScene.append(System.lineSeparator());
			stageScene.append(System.lineSeparator());

			if (game.changeOfStage()) { // Prüft ob Änderung bei Stage (=Text)

				stageScene.append("# Kapitel: "+(game.getCurrentStage()+1)+"\n");
				stageScene.append(game.getStageScene());
				stageScene.append(System.lineSeparator());
				stageScene.append(System.lineSeparator());
			}

			inputField.setText("");

		}
	}

	// Hilfsmethoden - public für JUnit (s. ConsoleUi)

	public static String parseConsoleInput(String s) {

		String t = "";

		for (int i = 0; i < s.length(); i++) { // entferne Leerzeichen und ;= 
			if (!(s.charAt(i) == ';') && !(s.charAt(i) == ' ') && !(s.charAt(i) == '=')) {
				t += s.charAt(i);
			}
		}
		return t;
	}


	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}


	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub

	}

}